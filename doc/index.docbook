<?xml version="1.0" ?>
<!DOCTYPE book PUBLIC "-//KDE//DTD DocBook XML V4.2-Based Variant V1.1//EN"
"dtd/kdex.dtd" [
<!ENTITY lokalize "Lokalize">
<!ENTITY kaider "Lokalize">
<!ENTITY kappname "Lokalize">
<!ENTITY package "kdesdk">
<!ENTITY % addindex "IGNORE">
<!ENTITY % English "INCLUDE">
]>
<book id="lokalize" lang="&language;">
<bookinfo>
<title>The &lokalize; Handbook</title>
<authorgroup>
<author>
<firstname>Nick</firstname>
<surname>Shaforostoff</surname>
<affiliation><address><email>shaforostoff@kde.ru</email></address></affiliation>
</author>
<!-- TRANS:ROLES_OF_TRANSLATORS -->
</authorgroup>

<copyright>
<year>2007-2008</year><holder>Nick Shaforostoff</holder>
</copyright>

<legalnotice>&FDLNotice;</legalnotice>

<date>2008-09-10</date>
<releaseinfo>0.3</releaseinfo>

<abstract>
<para>
&lokalize; is a computer-aided translation system that focuses on productivity and
quality assurance.  &lokalize; applies a paragraph-by-paragraph translation approach
when translating documentation, and takes a message-by-message approach when
translating &GUI; components.
</para>
</abstract>

<keywordset>
<keyword>&lokalize;</keyword>
<keyword>localization</keyword>
<keyword>translation</keyword>
</keywordset>

</bookinfo>

<chapter id="introduction">
<title>Introduction</title>

<para>
When you start &lokalize; without any command-line arguments,
you will see two big multi-line edits as well as a bunch of <emphasis>toolviews</emphasis>.
These views can be stacked (similar to tabs), shown separately, or hidden.
Translation files consist of many English-target pairs called <emphasis>messages</emphasis>.
A <emphasis>message</emphasis> typically correspond to a single string in the
user interface, or one paragraph in the documentation. The purpose of the first
multi-line edit is to display the original part of the pair. The purpose of
the second multi-line edit is to display the translation. You can navigate
through the <emphasis>messages</emphasis> via the <guilabel>Catalog
Tree</guilabel> view or by using <keycap>Page Down</keycap> and <keycap>Page
Up</keycap>.
</para>

<tip>
<para>
It is recommended that you get used to the keyboard shortcuts instead of the
menus and toolbars for increased productivity. For example, use the
<keycombo>&Alt;<keycap>_</keycap></keycombo> to switch between
views when they are stacked into tabs, or
<keycombo>&Alt;<keycap>Q</keycap></keycombo> to initiate a query
when in the <guilabel>WebQueries</guilabel>.
</para>
</tip>
</chapter>

<chapter id="projects">
<title>Projects</title>

<para>
The projects are one of the main concepts in &lokalize;. A project is represented by
a file that contains paths, folders with translations, templates, and other files: 
glossary file, automation scripts, translation memories.
Whenever &lokalize; opens a file without a project loaded, it will search for a project file in the parent folders (up to four levels).
Alternatively, you can specify the project file via the <userinput>--project</userinput> flag
when starting &lokalize; from the command line.
</para>

<note>
<para>
Translation memories (unlike project files, glossary and scripts) are not shared between the translation team members,
as they are created and stored under the user's home folder, meaning that the translation
memories for all of the projects are stored in the same folder and thus can be used
when other projects are opened.
</para>
</note>


<sect1 id="project-view">
<title>Project Overview</title>

<para>
The <guilabel>Project Overview</guilabel> tab displays a file tree with statistics for a current project,
such as the percentage of translated messages completed and the last translator.
It allows you to open a selected file in new tab of the current &lokalize;, window.
</para>

</sect1>

<sect1 id="multifile-ops">
<title>Operations on multiple files</title>

<!-- TODO -->
<para>
Currently &lokalize; supports searching, replacing, and spellchecking within
multiple files. Select the items that you are interested in, then choose the
<guimenuitem>Find in files</guimenuitem> option from the context menu. The first
match will be displayed in the usual &lokalize; window. You can then proceed by
pressing the <keycap>F3</keycap> button to find the next match. If you press the
<keycap>F3</keycap> button and there are no matches left in the current file,
then the search will continue in the next file and so on. To reset the multiple
file search state, press <keycombo>&Ctrl;<keycap>F</keycap></keycombo> in &lokalize;, and the editor
window will reset.
</para>
</sect1>

</chapter>



<chapter id="glossary">
<title>Glossary</title>

<para>
Have you ever become tired of typing the same long text sequence several times
just because it would take more time to find its translation for a copy and
paste? Now you will only have to find the (frequent) word sequence in the
<guilabel>Glossary View</guilabel>, and then insert it by pressing a shortcut.
</para>

<para>
Of course the glossary should be populated with word sequences first. &lokalize;
has a handy glossary editor that allows an explicit search over the entire
glossary.
</para>

<screenshot>
<screeninfo>Glossary view in the bottom right corner displays glossary entries appropriate for the current entry</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="glossary.png" format="PNG"/>
    </imageobject>
    <textobject>
      <phrase>Glossary view in the bottom right corner displays glossary entries appropriate for the current entry</phrase>
    </textobject>
  </mediaobject>
</screenshot>

</chapter>

<chapter id="tm">
<title>Translation Memory</title>

<para>
The <guilabel>Translation Memory View</guilabel> allows you to drag and drop a
folder with translation files from say Dolphin into the view,
and then, within few minutes, translation suggestions will be shown automatically on the message entry switch.
To insert the translation suggestions into the file, use 
<keycombo>&Ctrl;<keycap>1</keycap></keycombo>, 
<keycombo>&Ctrl;<keycap>2</keycap></keycombo> and so on, depending on the number of suggestion.
</para>
</chapter>


<chapter id="sync">
<title>Translation Synchronization Capabilities</title>

<para>
The <guilabel>Sync Mode</guilabel> (previously known as <guilabel>Merge Mode</guilabel>)
saves a great deal of time for the editors, and for cases 
when two or more translators are working simultaneously on the same file,
or when one has to maintain translations for several branches of software.
</para>

<para>
&lokalize; allows quick navigation through the messages that differ, and displays
word-by-word differences. Also, &lokalize; has two Sync views - <guilabel>Primary Sync</guilabel> and <guilabel>Secondary Sync</guilabel>.
They are identical, but the former is usually used to merge translations and second to keep in sync translations for two software branches.
</para>

<para>
After you copied translation from auxiliary file (<emphasis>synchronized</emphasis> it),
any subsequent changes made to this entry will be replicated back to auxiliary file.
</para>

<sect1 id="file-merge">
<title>Merging</title>
<para>
One use of <guilabel>Sync Mode</guilabel> is reviewing changes made by (new)
contributors, when you cannot be sure of the quality of the work done.
</para>
<para>
Open a base file, then drop its changed version into the <guilabel>Primary Sync</guilabel> view,
followed by <keycombo>&Alt;<keycap>Down</keycap></keycombo> or <keycombo>&Alt;
<keycap>Up</keycap></keycombo> (remember that shortcuts may be modified in a usual way for all &kde; apps)
to navigate through entries that are different.
</para>
<screenshot>
<screeninfo>&lokalize; used for merging changes in translation</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="sync.png" format="PNG"/>
    </imageobject>
    <textobject>
      <phrase>&lokalize; used for merging changes in translation</phrase>
    </textobject>
  </mediaobject>
</screenshot>

</sect1>

<sect1 id="file-sync">
<title>Replication</title>
<para>
<guilabel>Sync Mode</guilabel> may also be used to make changes to translation for
two branches simultaneously.
Set <guilabel>Branch Dir</guilabel> path in your project options to the path that corresponds to
base dir of the branch, and <guilabel>Secondary Sync</guilabel> view will automatically open
files from branch. Then, each time you make changes in files of your main branch,
they will automatically be replicated to the branch
(of course, if it contains the same english string).
</para>
<para>
For example, if you work on KDE translation, you can checkout trunk to <filename class="directory">/home/xx/hacking/kde/trunk/l10n-kde4/YOUR_LANG</filename>
and branch to <filename class="directory">/home/xx/hacking/kde/branches/stable/l10n-kde4/YOUR_LANG</filename>.
Create &lokalize; project: <filename>/home/xx/hacking/kde/trunk/l10n-kde4/YOUR_LANG/project.ktp</filename> and 
set <filename class="directory">BranchDir=../../../branches/stable/l10n-kde4/YOUR_LANG</filename>, then work via this project,
and commit changes in both trunk and branch dirs.
</para>
</sect1>


<sect1 id="original-diff">
<title>Original Diff</title>
<para>
When original text changes, gettext tools update translation files and mark entries with changed original text as <emphasis>fuzzy</emphasis> (or <emphasis>non-approved</emphasis> in other terminology).
They store previous original text so that translators could see what changes exactly were made.
&lokalize; simplifies life of translator and highlights parts of original text that were changed in <guilabel>Original Diff</guilabel> view.
</para>

<screenshot>
<screeninfo>&lokalize; highlighting parts of original text that were changed since translation was last reviewed</screeninfo>
  <mediaobject>
    <imageobject>
      <imagedata fileref="original-diff.png" format="PNG"/>
    </imageobject>
    <textobject>
      <phrase>&lokalize; highlighting parts of original text that were changed since translation was last reviewed</phrase>
    </textobject>
  </mediaobject>
</screenshot>


</sect1>

</chapter>

<!--
<chapter id="WebQuery">
<title>WebQuery</title>

<para>
The <guilabel>WebQuery View</guilabel> lists the scripts that are defined
project-wise as well as local client/program-wise. See an example script that
works with the 
<ulink url="http://www.google.com/language_tools?hl=en">Google Language
Tools</ulink> as well as the project file for it, at <ulink
url="http://websvn.kde.org/trunk/l10n-kde4/ru/" />.
</para>
</chapter>
-->
<chapter id="credits">
<title>Credits and License</title>

<para>
&lokalize;
</para>

<para>
Program Copyright &copy; 2007-2008, Nick Shaforostoff
<email>shaforostoff@kde.ru</email>
</para>

<para>
Some code was taken from &kbabel;, the &lokalize; predecessor.
</para>

<para>
Documentation Copyright &copy; 2007-2008 Nick Shaforostoff
<email>shaforostoff@kde.ru</email>
</para>

<para>
Author:
<itemizedlist>
<listitem>
<para>
Nick Shaforostoff <email>shaforostoff AT kde.ru</email>
</para>
</listitem>
</itemizedlist>
</para>

<para>See the <ulink
url="http://techbase.kde.org/Projects/Summer_of_Code/2007/Projects/KAider">
&lokalize; homepage</ulink> for more details.</para>

<!-- TRANS:CREDIT_FOR_TRANSLATORS -->
&underFDL;
&underGPL;

</chapter>

&documentation.index;
</book>
<!--
Local Variables:
mode: sgml
sgml-minimize-attributes:nil
sgml-general-insert-case:lower
sgml-indent-step:0
sgml-indent-data:nil
End:

// vim:ts=2:sw=2:tw=78:noet
-->
